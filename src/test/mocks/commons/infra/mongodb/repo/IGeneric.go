// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	serviceDomain "backend-skeleton-golang/commons/domain/service"

	mock "github.com/stretchr/testify/mock"
)

// IGeneric is an autogenerated mock type for the IGeneric type
type IGeneric[T interface{}, D interface{}] struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *IGeneric[T, D]) Create(_a0 D) (D, error) {
	ret := _m.Called(_a0)

	var r0 D
	var r1 error
	if rf, ok := ret.Get(0).(func(D) (D, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(D) D); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(D)
	}

	if rf, ok := ret.Get(1).(func(D) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *IGeneric[T, D]) DeleteById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: query
func (_m *IGeneric[T, D]) Find(query interface{}) ([]D, error) {
	ret := _m.Called(query)

	var r0 []D
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]D, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []D); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]D)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *IGeneric[T, D]) FindById(id string) (*D, error) {
	ret := _m.Called(id)

	var r0 *D
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*D, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *D); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*D)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: query
func (_m *IGeneric[T, D]) FindOne(query interface{}) (*D, error) {
	ret := _m.Called(query)

	var r0 *D
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*D, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *D); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*D)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPagination provides a mock function with given fields: query, limit, page
func (_m *IGeneric[T, D]) FindPagination(query interface{}, limit int64, page int) (*serviceDomain.PaginationData[D], error) {
	ret := _m.Called(query, limit, page)

	var r0 *serviceDomain.PaginationData[D]
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, int64, int) (*serviceDomain.PaginationData[D], error)); ok {
		return rf(query, limit, page)
	}
	if rf, ok := ret.Get(0).(func(interface{}, int64, int) *serviceDomain.PaginationData[D]); ok {
		r0 = rf(query, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceDomain.PaginationData[D])
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, int64, int) error); ok {
		r1 = rf(query, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWithNot provides a mock function with given fields: queryNot, query
func (_m *IGeneric[T, D]) FindWithNot(queryNot map[string]interface{}, query map[string]interface{}) (*D, error) {
	ret := _m.Called(queryNot, query)

	var r0 *D
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, map[string]interface{}) (*D, error)); ok {
		return rf(queryNot, query)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, map[string]interface{}) *D); ok {
		r0 = rf(queryNot, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*D)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, map[string]interface{}) error); ok {
		r1 = rf(queryNot, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, data
func (_m *IGeneric[T, D]) UpdateById(id string, data interface{}) (*D, error) {
	ret := _m.Called(id, data)

	var r0 *D
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*D, error)); ok {
		return rf(id, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *D); ok {
		r0 = rf(id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*D)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGeneric interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGeneric creates a new instance of IGeneric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGeneric[T interface{}, D interface{}](t mockConstructorTestingTNewIGeneric) *IGeneric[T, D] {
	mock := &IGeneric[T, D]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
