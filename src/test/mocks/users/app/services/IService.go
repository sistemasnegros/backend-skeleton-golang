// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	serviceDomain "backend-skeleton-golang/commons/domain/service"
	usersDTO "backend-skeleton-golang/users/app/dto"

	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// Create provides a mock function with given fields: body
func (_m *IService) Create(body *usersDTO.Create) (int, interface{}) {
	ret := _m.Called(body)

	var r0 int
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(*usersDTO.Create) (int, interface{})); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*usersDTO.Create) int); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*usersDTO.Create) interface{}); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *IService) DeleteById(id string) (int, interface{}) {
	ret := _m.Called(id)

	var r0 int
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(string) (int, interface{})); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) interface{}); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0
func (_m *IService) Find(_a0 *serviceDomain.PaginationOpts) (int, interface{}) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(*serviceDomain.PaginationOpts) (int, interface{})); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*serviceDomain.PaginationOpts) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*serviceDomain.PaginationOpts) interface{}); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *IService) FindById(id string) (int, interface{}) {
	ret := _m.Called(id)

	var r0 int
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(string) (int, interface{})); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) interface{}); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, body
func (_m *IService) UpdateById(id string, body *usersDTO.Update) (int, interface{}) {
	ret := _m.Called(id, body)

	var r0 int
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(string, *usersDTO.Update) (int, interface{})); ok {
		return rf(id, body)
	}
	if rf, ok := ret.Get(0).(func(string, *usersDTO.Update) int); ok {
		r0 = rf(id, body)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, *usersDTO.Update) interface{}); ok {
		r1 = rf(id, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIService(t mockConstructorTestingTNewIService) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
